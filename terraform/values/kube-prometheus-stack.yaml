---
defaultRules:
  rules:
    etcd: false
    kubeScheduler: false
kubeControllerManager:
  enabled: false
kubeEtcd:
  enabled: false
kubeScheduler:
  enabled: false
commonLabels:
  release: kube-prometheus-stack
nodeExporter:
  enabled: true
  operatingSystems:
    linux:
      enabled: true
    darwin:
      enabled: false
prometheus-node-exporter:
  prometheus:
    monitor:
      enabled: true
prometheus:
  prometheusSpec:
    podMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    enableRemoteWriteReceiver: true
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
    serviceMonitorSelector:
      matchLabels:
        release: kube-prometheus-stack
    retention: 7d
  additionalServiceMonitors:
    - name: spring-boot-actuator
      additionalLabels:
        release: kube-prometheus-stack
      selector:
        matchLabels:
          springBoot: actuator
      namespaceSelector:
        any: true
      endpoints:
        - interval: 30s
          path: /actuator/prometheus
          port: management
          relabelings:
          - sourceLabels:
            - service
            targetLabel: application
          - sourceLabels:
            - pod
            targetLabel: instance
    - name: ingress-nginx
      additionalLabels:
        release: kube-prometheus-stack
      selector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
      namespaceSelector:
        any: true
      endpoints:
        - port: metrics

alertmanager:
  enabled: false
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi

grafana:
  enabled: true
  defaultDashboardsTimezone: America/Sao_Paulo
  deploymentStrategy: { "type": "Recreate" }
  adminUser: ""
  adminPassword: ""
  admin:
    existingSecret: grafana-admin
    userKey: user
    passwordKey: password
  plugins:
    - grafana-clock-panel
  serviceMonitor:
    labels:
      release: kube-prometheus-stack
  persistence:
    enabled: true
    type: statefulset
    storageClassName: standard
    accessModes: ["ReadWriteOnce"]
    size: 10Gi
    finalizers:
      - kubernetes.io/pvc-protection
  ingress:
    enabled: true
    ingressClassName: nginx-private
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$1
    path: /grafana/?(.*)
    pathType: Prefix
    hosts:
      - 172.19.255.250.sslip.io
    tls:
      - hosts:
        - 172.19.255.250.sslip.io
        secretName: test-cert-2023
  grafana.ini:
    server:
      domain: 172.19.255.250.sslip.io
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
      # serve_from_sub_path: true
    auth.ldap:
      enabled: true
      allow_sign_up: true
    feature_toggles:
      enable: "tempoServiceGraph tempoSearch tempoBackendSearch tempoApmTable"
  env:
    GF_AUTH_ANONYMOUS_ENABLED: true
    GF_AUTH_ANONYMOUS_ORG_ROLE: 'Admin'
    GF_AUTH_DISABLE_LOGIN_FORM: true
    GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /tmp/dashboards/SpringBoot-APM-Dashboard.json
  ldap:
    enabled: false
    config: |-
      verbose_logging = false
      [[servers]]
      host = "ad01.wilton.corp ad02.wilton.corp"
      port = 3269
      use_ssl = true
      start_tls = false
      ssl_skip_verify = true
      bind_dn = "WILTON\\%s"
      search_filter = "(sAMAccountName=%s)"
      search_base_dns = ["dc=wilton,dc=corp"]
      [servers.attributes]
      name = "givenName"
      surname = "sn"
      username = "sAMAccountName"
      member_of = "memberOf"
      email =  "mail"
      [[servers.group_mappings]]
      group_dn = "cn=devops,ou=groups,dc=wilton,dc=corp"
      org_role = "Admin"
      [[servers.group_mappings]]
      group_dn = "cn=developers,ou=groups,dc=wilton,dc=corp"
      org_role = "Viewer"
  additionalDataSources:
    - name: Loki
      type: loki
      uid: loki
      access: proxy
      orgId: 1
      url: http://loki-gateway.loki.svc.cluster.local
      basicAuth: false
      isDefault: false
      version: 1
      editable: true
      jsonData:
        derivedFields:
          - datasourceUid: tempo
            matcherRegex: '(?:traceID|trace_id|tid)=(\w+)'
            name: trace_id
            url: $${__value.raw}
    - name: Tempo
      type: tempo
      access: proxy
      url: http://tempo.tempo.svc.cluster.local:3100
      basicAuth: false
      isDefault: false
      version: 1
      orgId: 1
      editable: false
      uid: tempo
      jsonData:
        httpMethod: GET
        tracesToLogs:
          datasourceUid: 'loki'
          tags: [ 'app' ]
          mappedTags: [ { key: 'service.name', value: 'app' }  ]
          mapTagNamesEnabled: true
          filterByTraceID: true
          filterBySpanID: false
          lokiSearch: true
        serviceMap:
          datasourceUid: 'prometheus'
        search:
          hide: false
        nodeGraph:
          enabled: true
  sidecar:
    datasources:
      enabled: true
      exemplarTraceIdDestinations:
        datasourceUid: tempo
        traceIdLabelName: trace_id
        urlDisplayLabel: 'View in Tempo'
      label: grafana_datasource
      labelValue: "1"
      alertmanager:
        enabled: false
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
      searchNamespace: ALL